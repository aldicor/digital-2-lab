#include "xiicps.h"       // Zynq PS I2C controller
#include "xuartps.h"      // Zynq UART controller
#include "xparameters.h"  // For device IDs
#include "xil_printf.h"   // For printing
#include "sleep.h"        // For usleep

#define MPU6050_ADDR 0x68
#define REG_PWR_MGMT_1 0x6B
#define ACCEL_XOUT_H 0x3B
#define UART_DEVICE_ID XPAR_XUARTPS_0_DEVICE_ID
#define I2C_DEVICE_ID XPAR_XIICPS_0_DEVICE_ID

XIicPs IicInstance;
XUartPs UartInstance;

int uart_init(XUartPs *uart, u16 device_id) {
    XUartPs_Config *config;
    int status;

    config = XUartPs_LookupConfig(device_id);
    if (config == NULL) return XST_FAILURE;

    status = XUartPs_CfgInitialize(uart, config, config->BaseAddress);
    if (status != XST_SUCCESS) return XST_FAILURE;

    // Set up UART (115200 baud, 8 data bits, 1 stop bit, no parity)
    XUartPs_SetBaudRate(uart, 115200);
    XUartPs_SetDataFormat(uart, 8, 1, XUARTPS_FORMAT_NO_PARITY);

    return XST_SUCCESS;
}

int mpu6050_init(XIicPs *iic, u16 device_id) {
    XIicPs_Config *config;
    int status;

    config = XIicPs_LookupConfig(device_id);
    if (config == NULL) return XST_FAILURE;

    status = XIicPs_CfgInitialize(iic, config, config->BaseAddress);
    if (status != XST_SUCCESS) return XST_FAILURE;

    // Set I2C speed to 100kHz
    XIicPs_SetSClk(iic, 100000);

    return XST_SUCCESS;
}

int mpu6050_read(XIicPs *iic, u8 reg, u8 *data, int length) {
    int status;

    // Write register address
    status = XIicPs_MasterSendPolled(iic, &reg, 1, MPU6050_ADDR);
    if (status != XST_SUCCESS) return status;

    // Read data
    return XIicPs_MasterRecvPolled(iic, data, length, MPU6050_ADDR);
}

void print_uart(XUartPs *uart, const char *str) {
    XUartPs_Send(uart, (u8 *)str, strlen(str));
}

int main() {
    u8 data[6];
    int16_t ax, ay, az;
    char buffer[100];

    // Initialize UART
    if (uart_init(&UartInstance, UART_DEVICE_ID) != XST_SUCCESS) {
        return XST_FAILURE;
    }
    print_uart(&UartInstance, "UART Initialized\r\n");

    // Initialize I2C
    if (mpu6050_init(&IicInstance, I2C_DEVICE_ID) != XST_SUCCESS) {
        print_uart(&UartInstance, "I2C Initialization Failed\r\n");
        return XST_FAILURE;
    }
    print_uart(&UartInstance, "I2C Initialized\r\n");

    // Wake up MPU6050 (write to PWR_MGMT_1 register)
    u8 wakeup[2] = {REG_PWR_MGMT_1, 0x00};
    if (XIicPs_MasterSendPolled(&IicInstance, wakeup, 2, MPU6050_ADDR) != XST_SUCCESS) {
        print_uart(&UartInstance, "MPU6050 Wakeup Failed\r\n");
        return XST_FAILURE;
    }
    print_uart(&UartInstance, "MPU6050 Woken Up\r\n");

    while(1) {
        if (mpu6050_read(&IicInstance, ACCEL_XOUT_H, data, 6) == XST_SUCCESS) {
            ax = (data[0] << 8) | data[1];
            ay = (data[2] << 8) | data[3];
            az = (data[4] << 8) | data[5];

            // Format output string
            sprintf(buffer, "Accel: X=%6d, Y=%6d, Z=%6d\r\n", ax, ay, az);
            print_uart(&UartInstance, buffer);
        } else {
            print_uart(&UartInstance, "Read failed\r\n");
        }

        usleep(500000); // 0.5 second delay
    }

    return XST_SUCCESS;
}
