#include "xparameters.h"
#include "xiicps.h"
#include "xuartps.h"
#include "sleep.h"
#include <string.h>
#include <stdio.h>

#define I2C_DEVICE_ID     XPAR_XIICPS_0_DEVICE_ID
#define UART_DEVICE_ID    XPAR_XUARTPS_1_DEVICE_ID

#define MPU6050_ADDR      0x68
#define WHO_AM_I_REG      0x75
#define PWR_MGMT_1        0x6B
#define ACCEL_XOUT_H      0x3B

XIicPs Iic;
XUartPs Uart;

// UART print function using XUartPs_Send
void uart_print(const char *msg) {
    XUartPs_Send(&Uart, (u8 *)msg, strlen(msg));
    while (XUartPs_IsSending(&Uart));  // Wait until complete
}

// Combine MSB and LSB into signed 16-bit
s16 combine_bytes(u8 msb, u8 lsb) {
    return (s16)((msb << 8) | lsb);
}

int main() {
    XIicPs_Config *IicConfig;
    XUartPs_Config *UartConfig;
    int Status;
    u8 write_buf[2], read_buf[14];
    char buffer[128];

    // Init UART1
    UartConfig = XUartPs_LookupConfig(UART_DEVICE_ID);
    XUartPs_CfgInitialize(&Uart, UartConfig, UartConfig->BaseAddress);
    XUartPs_SetBaudRate(&Uart, 115200);

    uart_print("Starting MPU6050 Test...\r\n");

    // Init I2C0
    IicConfig = XIicPs_LookupConfig(I2C_DEVICE_ID);
    XIicPs_CfgInitialize(&Iic, IicConfig, IicConfig->BaseAddress);
    XIicPs_SetSClk(&Iic, 100000); // 100 kHz

    // Wake up MPU6050
    write_buf[0] = PWR_MGMT_1;
    write_buf[1] = 0x00;
    XIicPs_MasterSendPolled(&Iic, write_buf, 2, MPU6050_ADDR);
    while (XIicPs_BusIsBusy(&Iic));

    // Read WHO_AM_I
    write_buf[0] = WHO_AM_I_REG;
    XIicPs_MasterSendPolled(&Iic, write_buf, 1, MPU6050_ADDR);
    while (XIicPs_BusIsBusy(&Iic));
    XIicPs_MasterRecvPolled(&Iic, read_buf, 1, MPU6050_ADDR);
    while (XIicPs_BusIsBusy(&Iic));
    sprintf(buffer, "WHO_AM_I = 0x%02X\r\n", read_buf[0]);
    uart_print(buffer);

    while (1) {
        // Read 14 bytes starting at ACCEL_XOUT_H
        write_buf[0] = ACCEL_XOUT_H;
        XIicPs_MasterSendPolled(&Iic, write_buf, 1, MPU6050_ADDR);
        while (XIicPs_BusIsBusy(&Iic));
        XIicPs_MasterRecvPolled(&Iic, read_buf, 14, MPU6050_ADDR);
        while (XIicPs_BusIsBusy(&Iic));

        // Parse raw data
        s16 ax = combine_bytes(read_buf[0], read_buf[1]);
        s16 ay = combine_bytes(read_buf[2], read_buf[3]);
        s16 az = combine_bytes(read_buf[4], read_buf[5]);
        s16 temp = combine_bytes(read_buf[6], read_buf[7]);
        s16 gx = combine_bytes(read_buf[8], read_buf[9]);
        s16 gy = combine_bytes(read_buf[10], read_buf[11]);
        s16 gz = combine_bytes(read_buf[12], read_buf[13]);

        // Scale
        float accel_scale = 16384.0;
        float gyro_scale = 131.0;

        sprintf(buffer, "\r\nAccel[g]: X=%.2f Y=%.2f Z=%.2f\r\n",
                ax / accel_scale, ay / accel_scale, az / accel_scale);
        uart_print(buffer);

        sprintf(buffer, "Gyro [°/s]: X=%.2f Y=%.2f Z=%.2f\r\n",
                gx / gyro_scale, gy / gyro_scale, gz / gyro_scale);
        uart_print(buffer);

        sprintf(buffer, "Temp [°C]: %.2f\r\n", (temp / 340.0) + 36.53);
        uart_print(buffer);

        sleep(5);
    }

    return 0;
}
