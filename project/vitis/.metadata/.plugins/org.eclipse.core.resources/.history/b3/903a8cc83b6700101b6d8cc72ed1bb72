#include "xiicps.h"
#include "xuartps.h"
#include "xparameters.h"
#include "xil_printf.h"
#include "sleep.h"
#include <stdio.h>      // Necesario para snprintf
#include <string.h>     // Necesario para strlen

#define I2C_DEVICE_ID    XPAR_XIICPS_0_DEVICE_ID
#define MPU6050_ADDR     0x68

#define MPU6050_PWR_MGMT_1   0x6B
#define MPU6050_ACCEL_XOUT_H 0x3B

XIicPs Iic;
extern XUartPs Uart;  // La UART se inicializa en platform.c

// Variables globales para offsets de calibraciÃ³n
int16_t offset_x = 0, offset_y = 0, offset_z = 0;

int init_i2c() {
    XIicPs_Config *Config = XIicPs_LookupConfig(I2C_DEVICE_ID);
    if (!Config) return XST_FAILURE;

    int status = XIicPs_CfgInitialize(&Iic, Config, Config->BaseAddress);
    if (status != XST_SUCCESS) return XST_FAILURE;

    XIicPs_SetSClk(&Iic, 100000); // 100kHz
    return XST_SUCCESS;
}

int mpu6050_init() {
    u8 config[2] = {MPU6050_PWR_MGMT_1, 0x00}; // Wake up
    return XIicPs_MasterSendPolled(&Iic, config, 2, MPU6050_ADDR);
}

int16_t read_word(u8 reg_addr) {
    u8 buffer[2];
    XIicPs_MasterSendPolled(&Iic, &reg_addr, 1, MPU6050_ADDR);
    usleep(1000);
    XIicPs_MasterRecvPolled(&Iic, buffer, 2, MPU6050_ADDR);
    return (int16_t)((buffer[0] << 8) | buffer[1]);
}

void calibrate_mpu6050(int samples) {
    int32_t sum_x = 0, sum_y = 0, sum_z = 0;

    xil_printf("Calibrating MPU6050...\r\n");
    for (int i = 0; i < samples; i++) {
        sum_x += read_word(MPU6050_ACCEL_XOUT_H);
        sum_y += read_word(MPU6050_ACCEL_XOUT_H + 2);
        sum_z += read_word(MPU6050_ACCEL_XOUT_H + 4);
        usleep(2000);
    }

    offset_x = sum_x / samples;
    offset_y = sum_y / samples;
    offset_z = (sum_z / samples) - 16384; // remove gravity

    xil_printf("Calibration done.\r\n");
}

void read_accel(int16_t *x, int16_t *y, int16_t *z) {
    *x = read_word(MPU6050_ACCEL_XOUT_H) - offset_x;
    *y = read_word(MPU6050_ACCEL_XOUT_H + 2) - offset_y;
    *z = read_word(MPU6050_ACCEL_XOUT_H + 4) - offset_z;
}

int main() {
    xil_printf("Starting MPU6050 test...\r\n");

    if (init_i2c() != XST_SUCCESS) {
        xil_printf("I2C init failed\r\n");
        return -1;
    }

    if (mpu6050_init() != XST_SUCCESS) {
        xil_printf("MPU6050 init failed\r\n");
        return -1;
    }

    calibrate_mpu6050(500);

    while (1) {
        int16_t ax, ay, az;
        read_accel(&ax, &ay, &az);

        char msg[100];
        snprintf(msg, sizeof(msg), "Accel [X:%6d, Y:%6d, Z:%6d]\r\n", ax, ay, az);
        XUartPs_Send(&Uart, (u8 *)msg, strlen(msg));

        sleep(1);
    }

    return 0;
}
