#include "xparameters.h"
#include "xiicps.h"
#include "xuartps.h"
#include <stdio.h>

#define I2C_DEVICE_ID   XPAR_XIICPS_0_DEVICE_ID
#define UART_DEVICE_ID  XPAR_XUARTPS_1_DEVICE_ID
#define MPU6050_ADDR    0x68
#define WHO_AM_I_REG    0x75

XIicPs Iic;
XUartPs Uart;

void uart_print(const char* msg) {
    XUartPs_Send(&Uart, (u8*)msg, strlen(msg));
}

int main() {
    int Status;
    XIicPs_Config *IicConfig;
    XUartPs_Config *UartConfig;
    u8 write_buf[1], read_buf[1];

    // Initialize UART1
    UartConfig = XUartPs_LookupConfig(UART_DEVICE_ID);
    XUartPs_CfgInitialize(&Uart, UartConfig, UartConfig->BaseAddress);
    XUartPs_SetBaudRate(&Uart, 115200);

    uart_print("MPU6050 I2C Test Start...\r\n");

    // Initialize I2C0
    IicConfig = XIicPs_LookupConfig(I2C_DEVICE_ID);
    XIicPs_CfgInitialize(&Iic, IicConfig, IicConfig->BaseAddress);
    XIicPs_SetSClk(&Iic, 100000);  // 100 kHz

    // Read WHO_AM_I register
    write_buf[0] = WHO_AM_I_REG;
    Status = XIicPs_MasterSendPolled(&Iic, write_buf, 1, MPU6050_ADDR);
    while (XIicPs_BusIsBusy(&Iic));
    if (Status != XST_SUCCESS) {
        uart_print("Failed to write to MPU6050\r\n");
        return XST_FAILURE;
    }

    Status = XIicPs_MasterRecvPolled(&Iic, read_buf, 1, MPU6050_ADDR);
    while (XIicPs_BusIsBusy(&Iic));
    if (Status != XST_SUCCESS) {
        uart_print("Failed to read from MPU6050\r\n");
        return XST_FAILURE;
    }

    char buffer[64];
    sprintf(buffer, "WHO_AM_I: 0x%02X\r\n", read_buf[0]);
    uart_print(buffer);

    if (read_buf[0] == 0x68) {
        uart_print("MPU6050 detected successfully!\r\n");
    } else {
        uart_print("MPU6050 not responding correctly.\r\n");
    }

    return 0;
}
